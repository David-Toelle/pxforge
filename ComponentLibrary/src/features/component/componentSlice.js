// componentSlice.js
// This file manages the state for components, including fetching, creating, updating, and deleting components.

import { createSlice } from "@reduxjs/toolkit"; // Importing Redux Toolkit's `createSlice`
import { componentApi } from "./componentApi"; // Importing the componentApi for API integration

//----------------------------------------------------------------
//                       Initial State
//----------------------------------------------------------------
// The initial state includes the following properties:
// 1. `currentComponent`: The component being created or edited.
// 2. `status`: Tracks the status of the API call (e.g., 'idle', 'loading', 'success', 'error').
// 3. `error`: Stores any error messages if the API call fails.

const initialState = {
  currentComponent: null,
  status: "idle",
  error: null,
};

//----------------------------------------------------------------
//                     Component Slice Setup
//----------------------------------------------------------------
// The `componentSlice` manages the component-related state and actions.
// It handles actions for setting the current component and manages API states.

const componentSlice = createSlice({
  name: "component", // The slice name
  initialState, // The initial state defined above
  reducers: {
    // Action to set the current component (e.g., when editing or creating a component)
    setCurrentComponent(state, action) {
      state.currentComponent = action.payload;
    },
    clearCurrentComponent(state) {
      state.currentComponent = null; // Action to clear the current component when creating a new one
    },
  },
  extraReducers: (builder) => {
    // Handling the API states for fetching components
    builder
      .addMatcher(
        componentApi.endpoints.fetchComponents.matchPending,
        (state) => {
          state.status = "loading";
        }
      )
      .addMatcher(
        componentApi.endpoints.fetchComponents.matchFulfilled,
        (state, action) => {
          state.status = "success";
          // Ensure components list is fetched here without overriding currentComponent
        }
      )
      .addMatcher(
        componentApi.endpoints.fetchComponents.matchRejected,
        (state, action) => {
          state.status = "error";
          state.error = action.error.message;
        }
      );
  },
});

// Exporting the `setCurrentComponent` and `clearCurrentComponent` actions for use in components
export const { setCurrentComponent, clearCurrentComponent } =
  componentSlice.actions;

// Exporting the component slice reducer to be included in the store
export default componentSlice.reducer;

//---------------------------------------------
//                Details
//---------------------------------------------

// 1. **`setCurrentComponent` action**:
//    - This action is dispatched to set the current component when the user is editing or creating a component.
//    - It updates the `currentComponent` state with the data provided in the action's payload.

// 2. **`clearCurrentComponent` action**:
//    - This action is dispatched when the user starts creating a new component.
//    - It clears the `currentComponent` state to ensure a fresh component creation.

// 3. **API state management (extraReducers)**:
//    - The extraReducers handle the state changes for API calls (e.g., fetching components).
//    - It listens for the pending, fulfilled, and rejected states of the API calls generated by RTK Query.
//    - This allows the UI to display loading, success, or error states based on the API response.
